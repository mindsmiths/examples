package rules.playerAgent;

import com.mindsmiths.telegramAdapter.events.TelegramKeyboardAnswered
import com.mindsmiths.telegramAdapter.events.TelegramReceivedMessage

import agents.PlayerAgent
import models.EvaluationResult
import signals.*


// *** New player ***
rule "Welcome new player"
    salience 100
    when
        signal: TelegramReceivedMessage(name: firstName) from entry-point "signals"
        agent: PlayerAgent(name == null)
    then
        agent.sendWelcomeMessage(name);
        modify(agent) {setName(name)};
        agent.send("GAME_ADMIN", new PlayerJoined(agent));
        delete(signal);
end

// *** Game management ***
rule "Request new game using text"
    when
        signal: TelegramReceivedMessage(text == "/start") from entry-point "signals"
        agent: PlayerAgent()
    then
        agent.send("GAME_ADMIN", new NewGameRequest());
        modify(agent) {resetGame()};
        delete(signal);
end

rule "Start new game"
    when
        signal: StartGame(celebrity: celebrity) from entry-point "signals"
        agent: PlayerAgent()
    then
        modify(agent) {setWaitingForAnswer(true), setNumberAttempts(0), setCurrentCelebrity(celebrity)};
        agent.sendStartMessage();
        delete(signal);
end

rule "No more attempts, game over"
    when
        signal: EndGame() from entry-point "signals"
        agent: PlayerAgent()
    then
        agent.offerNewGame("Game over üôÅ\nThe correct answer is " + agent.getCurrentCelebrity().getFollowerCount() + ". Wanna play again?");
        delete(signal);
end

rule "Stop game"
    when
        signal: TelegramKeyboardAnswered(answer == "STOP_PLAYING") from entry-point "signals"
        agent: PlayerAgent()
    then
        agent.sendMessage("Okay, see ya some other time!\nYou can start a new game by writing /start.");
        delete(signal);
end

// *** Guessing attempts ***
rule "Register attempt"
    when
        message: TelegramReceivedMessage(guess: text) from entry-point "signals"
        agent: PlayerAgent(waitingForAnswer == true, numberAttempts: numberAttempts, currentCelebrity: currentCelebrity)
    then
        modify(agent) {setNumberAttempts(numberAttempts + 1)};
        agent.send("GAME_ADMIN", new Guess(currentCelebrity, Integer.parseInt(guess), agent.getNumberAttempts()));
        delete(message);
end

rule "Guess too low"
    when
        signal: GuessResult(result == EvaluationResult.TOO_LOW) from entry-point "signals"
        agent: PlayerAgent()
    then
        agent.sendMessage("Ohh, that was too low.");
        delete(signal);
end

rule "Guess too high"
    when
        signal: GuessResult(result == EvaluationResult.TOO_HIGH) from entry-point "signals"
        agent: PlayerAgent()
    then
        agent.sendMessage("Sorry, that was too high.");
        delete(signal);
end

rule "Guess correct"
    when
        signal: GuessResult(result == EvaluationResult.CORRECT) from entry-point "signals"
        agent: PlayerAgent()
    then
        agent.offerNewGame("You got it! Nice job üí™");
        delete(signal);
end