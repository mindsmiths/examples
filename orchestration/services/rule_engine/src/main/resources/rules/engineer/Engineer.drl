package rules.engineer;

import com.mindsmiths.ruleEngine.util.Log
import com.mindsmiths.ruleEngine.model.Heartbeat
import com.mindsmiths.ruleEngine.util.Agents
import com.mindsmiths.telegramAdapter.TelegramReceivedMessage
import com.mindsmiths.telegramAdapter.TelegramKeyboardAnswered

import agents.Superior
import agents.Engineer
import signals.RobotCrashed
import signals.SuspiciousBehavior
import com.mindsmiths.ruleEngine.model.Initialize


rule "Welcome engineer"
    when
        msg: TelegramReceivedMessage() from entry-point "signals"
        initialize: Initialize() from entry-point "agent-created"
        agent: Engineer()
    then
        agent.sendMessage("Welcome, " + msg.getFirstName());
        delete(msg);
end

///////////////////////////////////////

rule "Notify of suspicious behavior"
    when
        signal: SuspiciousBehavior() from entry-point "signals"
        agent: Engineer()
    then
        agent.sendMessage(
                signal.getRobotId() + " not behaving as expected: " +
                signal.getDescription() + "\nPlease check it out."
        );
end

rule "Notify that robot crashed"
    when
        signal: RobotCrashed() from entry-point "signals"
        agent: Engineer()
    then
        agent.sendCrashOptions(
                signal.getRobotId() + " crashed! What would you like to do?",
                signal.getRobotId()
        );
        insert(signal);
end

rule "Automatically restart robot"
    when
        msg: TelegramKeyboardAnswered(robotId: referenceId, answer == "AUTO") from entry-point "signals"
        signal: RobotCrashed(robotId == robotId)
        agent: Engineer()
    then
        agent.sendMessage("Restarting robot " + robotId + ".");
        agent.attemptRestart(robotId);
        delete(msg);
        delete(signal);
end

rule "Manually restart robot"
    when
        msg: TelegramKeyboardAnswered(robotId: referenceId, answer == "MANUAL") from entry-point "signals"
        signal: RobotCrashed(robotId == robotId)
        agent: Engineer()
    then
        agent.sendMessage("Ok, " + robotId + " is now in your hands.");
        delete(msg);
        delete(signal);
end

rule "Notify superior"
    when
        msg: TelegramKeyboardAnswered(robotId: referenceId, answer == "SUPER") from entry-point "signals"
        signal: RobotCrashed(robotId == robotId)
        agent: Engineer()
    then
        agent.send(Superior.ID, signal);
        delete(msg);
        delete(signal);
end

rule "Notify superior on inactivity"
    when
        Heartbeat(now: timestamp) from entry-point "signals"
        signal: RobotCrashed(timestamp before[1m] now)
        agent: Engineer()
    then
        Log.warn("The engineer in charge taking too long to respond, notifying the superior.");
        agent.send(Superior.ID, signal);
        delete(signal);
end

///////////////////////////////////////

rule "Change engineer into superior"
    salience 100
    when
        msg: TelegramReceivedMessage(text.equalsIgnoreCase("super admin")) from entry-point "signals"
        agent: Engineer()
    then
        agent.sendMessage("Setting your admin rights...");
        Agents.createAgent(new Superior(agent));
        Agents.deleteAgent(agent);
        delete(msg);
end
